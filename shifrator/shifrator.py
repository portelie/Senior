class InteractiveCipher:
    def __init__(self, shift=3):
        self.shift = shift  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ—â–µ–Ω—å –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è

    def encrypt(self, text):
        encrypted_text = ""
        for char in text:
            if char.isalpha():  # –Ø–∫—â–æ —Ü–µ –ª—ñ—Ç–µ—Ä–∞
                shift_base = ord('–ê') if char.isupper() else ord('–∞')  # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∞–ª—Ñ–∞–≤—ñ—Ç
                new_char = chr((ord(char) - shift_base + self.shift) % 32 + shift_base)
                encrypted_text += new_char
            else:
                encrypted_text += char  # –ù–µ–∞–ª—Ñ–∞–≤—ñ—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        return encrypted_text

    def start(self):
        print("üîê –ù—É —â–æ —Ç–∏ –∑–±–∏—Ä–∞—î—à—Å—è —Ö–æ–≤–∞—Ç–∏?) üîê")
        print(f"–¢–∏ –∑–∞—ó–±–µ—à—Å—è –Ω–∞ {self.shift} –≥–æ–¥–∏–Ω–∏.")
        while True:
            message = input("\n–í–≤–µ–¥–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–∞–±–æ '–≤–∏—Ö—ñ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è): ")
            if message.lower() == "–≤–∏—Ö—ñ–¥":
                print("üëã –Ø —Ç–µ–±–µ –∑–∞–¥–æ–∫—Å–∏–≤, —Ö–∞—Ö–∞—Ö–∞—Ö–∞–∞—Ö—Ö–∞")
                break
            encrypted = self.encrypt(message)
            print(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {encrypted}")


# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —à–∏—Ñ—Ä–∞—Ç–æ—Ä–∞ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ
cipher = InteractiveCipher(shift=5)
cipher.start()
